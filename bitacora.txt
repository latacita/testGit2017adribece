%%==================================================================%%
%%                 Métodos de Desarrollo - Test de Git              %%
%%==================================================================%%
%% Alumno (Apellidos, Nombre): Becerril Crespo, Adrián              %%
%%==================================================================%%

 Paso   Acción                       Notas
====== ============================ ================================
(03)	git branch Historia000
(04)	git branch Historia001
(05)	git checkout Historia000
(07)	git add bitacora.txt
(08)	git commit -m "Paso 08"
(09)	git checkout Historia001	
(11)	git checkout Historia000		Se produce un error, debido a que existen
						cambios, concretamente en bitacora.txt, 
						que podrían ser perdidos al cambiar de rama.
						Por tanto git nos aconseja o bien realizar
						un commit o bien mandar los cambios sin guardar
						al stash. Como se nos dice en el enunciado 
						que nos cambiemos de rama sin realizar un commit, 
						aplicamos el proceso de mandar los cambios al
						stash mediante un "git stash".
(16)	git stash apply stash@{0}
(20)	git merge Historia000			La fusión es realizada de manera recursiva originando
						por tanto un nuevo commit donde se integran las dos
						ramas quedan integradas. Durante la fusión han surgido 
						conflictos en el archivo bitcora.txt puesto que en ambas
						ramas se han modificado mismos trozos de código.
(25)						Se haría la fusión por fast-forward
(27)	git tag RespuestaPreguntaFusion
(28)	git push origin nomRama 		Se haría para cada rama que tengamos el respositorio
						sustituyendo nomRama por el nombre de la rama remota
						donde queremos subir cambios. Cuando realizamos
						push a la rama master, nos sale un error diciendo 
						que existen commits anteriores que no están incluidos
						en nuestro repositorio local. Por tanto, realizamos
						un pull, creando de esta forma un nuevo commit donde se 
						integran los cambios de nuestro respositorio con los cambios
						que no teniamos y que se han producido en el repositorio remoto
						para esa rama. No surgen conflictos, git lo hace de manera automática.
